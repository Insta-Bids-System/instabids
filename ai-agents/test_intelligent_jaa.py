#!/usr/bin/env python3
"""
Test the new Intelligent JAA Agent with Claude Opus 4 + LangGraph
"""
import asyncio
import os
from agents.jaa.agent import JobAssessmentAgent
from database_simple import db
from dotenv import load_dotenv

# Load environment variables
load_dotenv(os.path.join(os.path.dirname(__file__), '..', '.env'))

def test_intelligent_jaa():
    """Test the intelligent JAA with a real conversation"""
    print("\n🧠 Testing Intelligent JAA Agent with Claude Opus 4 + LangGraph...")
    
    # Initialize the Intelligent JAA
    jaa = JobAssessmentAgent()
    
    # First, let's see what conversations we have available
    print("\n[STEP 1] Checking available conversations...")
    conversations_result = db.client.table('agent_conversations').select('thread_id, user_id, agent_type').order('created_at', desc=True).limit(5).execute()
    
    if not conversations_result.data:
        print("❌ No conversations found in database")
        return
    
    print(f"Found {len(conversations_result.data)} recent conversations:")
    for i, conv in enumerate(conversations_result.data):
        print(f"  {i+1}. {conv['thread_id']} (user: {conv.get('user_id', 'unknown')}, agent: {conv.get('agent_type', 'unknown')})")
    
    # Use the most recent CIA conversation
    test_thread_id = conversations_result.data[0]['thread_id']
    print(f"\n[STEP 2] Testing with conversation: {test_thread_id}")
    
    # Process with Intelligent JAA
    print("\n[STEP 3] Processing with Intelligent JAA...")
    result = jaa.process_conversation(test_thread_id)
    
    if result.get('success'):
        print(f"\n✅ INTELLIGENT JAA SUCCESS!")
        print(f"   📋 Bid Card Number: {result['bid_card_number']}")
        print(f"   🏠 Project Type: {result['bid_card_data']['project_type']}")
        print(f"   💰 Budget: ${result['bid_card_data']['budget_min']}-${result['bid_card_data']['budget_max']}")
        print(f"   ⚡ Urgency: {result['bid_card_data']['urgency_level']}")
        print(f"   🔧 Complexity Score: {result['bid_card_data']['complexity_score']}")
        print(f"   🎯 Intention Score: {result['bid_card_data']['intention_score']}")
        print(f"   🗃️ Database ID: {result['database_id']}")
        
        # Show AI insights
        if 'ai_insights' in result['bid_card_data']:
            insights = result['bid_card_data']['ai_insights']
            print(f"\n🤖 AI Analysis Preview:")
            analysis = insights.get('project_analysis', '')
            if analysis:
                print(f"   {analysis[:200]}...")
            print(f"   Generated by: {insights.get('generated_by')}")
            print(f"   Generated at: {insights.get('generated_at')}")
        
        return True
    else:
        print(f"\n❌ INTELLIGENT JAA FAILED: {result.get('error')}")
        return False

if __name__ == "__main__":
    success = test_intelligent_jaa()
    if success:
        print("\n🎉 Intelligent JAA Agent is working perfectly!")
        print("   - LangGraph workflow completed successfully")
        print("   - Claude Opus 4 extraction working")  
        print("   - Database saves working")
        print("   - AI insights generated")
    else:
        print("\n⚠️  Intelligent JAA Agent needs debugging")